
Traffic system for blind.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000043e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b76  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ac  00000000  00000000  000010c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073d  00000000  00000000  0000176e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00001eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000511  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cf  00000000  00000000  00002549  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  74:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ACTIVE_BUZZER>:
#include <avr/io.h>
#include "MACROS.h"
void ACTIVE_BUZZER()
{
	DDRB |=(1<<4);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	80 61       	ori	r24, 0x10	; 16
  80:	87 bb       	out	0x17, r24	; 23
	PORTB &=(~(1<<4)); //initially led is closed
  82:	88 b3       	in	r24, 0x18	; 24
  84:	8f 7e       	andi	r24, 0xEF	; 239
  86:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,4);
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	80 61       	ori	r24, 0x10	; 16
  8c:	88 bb       	out	0x18, r24	; 24
  8e:	08 95       	ret

00000090 <DISABLE_BUZZER>:
}
void DISABLE_BUZZER()
{
	DDRB |=(1<<4);
  90:	87 b3       	in	r24, 0x17	; 23
  92:	80 61       	ori	r24, 0x10	; 16
  94:	87 bb       	out	0x17, r24	; 23
	PORTB &=(~(1<<4)); //initially led is closed
  96:	88 b3       	in	r24, 0x18	; 24
  98:	8f 7e       	andi	r24, 0xEF	; 239
  9a:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(PORTB,4);
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	8f 7e       	andi	r24, 0xEF	; 239
  a0:	88 bb       	out	0x18, r24	; 24
  a2:	08 95       	ret

000000a4 <BUZZER>:
}
void BUZZER()   
{
		ACTIVE_BUZZER();
  a4:	0e 94 3e 00 	call	0x7c	; 0x7c <ACTIVE_BUZZER>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f e5       	ldi	r18, 0x5F	; 95
  aa:	8a ee       	ldi	r24, 0xEA	; 234
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <BUZZER+0xa>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <BUZZER+0x14>
  b8:	00 00       	nop
		_delay_ms(300);
		DISABLE_BUZZER();
  ba:	0e 94 48 00 	call	0x90	; 0x90 <DISABLE_BUZZER>
  be:	08 95       	ret

000000c0 <operatingredLED>:
#include <avr/io.h>
#include "MACROS.h"
void operatingredLED()
{
	DDRB |=(1<<7); 
  c0:	87 b3       	in	r24, 0x17	; 23
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	87 bb       	out	0x17, r24	; 23
	 PORTB &=(~(1<<7)); //initially led is closed
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	8f 77       	andi	r24, 0x7F	; 127
  ca:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,7);
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	88 bb       	out	0x18, r24	; 24
  d2:	08 95       	ret

000000d4 <disableredLED>:
		
}
void disableredLED()
{
	DDRB |=(1<<7); 
  d4:	87 b3       	in	r24, 0x17	; 23
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	87 bb       	out	0x17, r24	; 23
	PORTB &=(~(1<<7)); //initially led is closed
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	8f 77       	andi	r24, 0x7F	; 127
  de:	88 bb       	out	0x18, r24	; 24
CLR_BIT(PORTB,7); 
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	8f 77       	andi	r24, 0x7F	; 127
  e4:	88 bb       	out	0x18, r24	; 24
  e6:	08 95       	ret

000000e8 <operatingyellowLED>:
	
}

void operatingyellowLED()
{
	DDRB |=(1<<6);
  e8:	87 b3       	in	r24, 0x17	; 23
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	87 bb       	out	0x17, r24	; 23
	PORTB &=(~(1<<6)); //initially led is closed
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	8f 7b       	andi	r24, 0xBF	; 191
  f2:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,6);
  f4:	88 b3       	in	r24, 0x18	; 24
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	08 95       	ret

000000fc <disableyellowLED>:
	
}
void disableyellowLED()
{
	DDRB |=(1<<6);
  fc:	87 b3       	in	r24, 0x17	; 23
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	87 bb       	out	0x17, r24	; 23
	PORTB &=(~(1<6)); //initially led is closed
 102:	88 b3       	in	r24, 0x18	; 24
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(PORTB,6);
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	8f 7b       	andi	r24, 0xBF	; 191
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	08 95       	ret

00000110 <TRAFFIC_OFF_FOR_PEOPLE>:
#include "BUZZER.c"  //Buzzer control library
typedef unsigned char u8; //unsigned char[8_bits] "u8"
/*TRAFFIC_OFF_FOR_PEOPLE function to implement the process of counting
7 segment "24 sec"*/
int TRAFFIC_OFF_FOR_PEOPLE()
{
 110:	cf 93       	push	r28
	 u8 counter_11=2; //initialize first counter with 2
  u8 counter_22=5;  //initialize second counter with 5
// declaration 7 segments as an output module
 DDRC |=(1<<0);  
 112:	84 b3       	in	r24, 0x14	; 20
 114:	81 60       	ori	r24, 0x01	; 1
 116:	84 bb       	out	0x14, r24	; 20
 DDRC |=(1<<1);
 118:	84 b3       	in	r24, 0x14	; 20
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	84 bb       	out	0x14, r24	; 20
 DDRC|=(1<<2);
 11e:	84 b3       	in	r24, 0x14	; 20
 120:	84 60       	ori	r24, 0x04	; 4
 122:	84 bb       	out	0x14, r24	; 20
    DDRC |=(1<<3);
 124:	84 b3       	in	r24, 0x14	; 20
 126:	88 60       	ori	r24, 0x08	; 8
 128:	84 bb       	out	0x14, r24	; 20
   DDRA |=(1<<0);
 12a:	8a b3       	in	r24, 0x1a	; 26
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	8a bb       	out	0x1a, r24	; 26
   DDRA |=(1<<1);
 130:	8a b3       	in	r24, 0x1a	; 26
 132:	82 60       	ori	r24, 0x02	; 2
 134:	8a bb       	out	0x1a, r24	; 26
   DDRA |=(1<<2);
 136:	8a b3       	in	r24, 0x1a	; 26
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	8a bb       	out	0x1a, r24	; 26
   DDRA |=(1<<3); 
 13c:	8a b3       	in	r24, 0x1a	; 26
 13e:	88 60       	ori	r24, 0x08	; 8
 140:	8a bb       	out	0x1a, r24	; 26
   //initialize value of PORTS
 PORTC = 0x02;
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	85 bb       	out	0x15, r24	; 21
 PORTA = 0x05;
 146:	85 e0       	ldi	r24, 0x05	; 5
 148:	8b bb       	out	0x1b, r24	; 27
 // begin process
{
while(counter_22!=0)
 14a:	0d c0       	rjmp	.+26     	; 0x166 <TRAFFIC_OFF_FOR_PEOPLE+0x56>
	{
	PORTA=0X02;
 14c:	92 e0       	ldi	r25, 0x02	; 2
 14e:	9b bb       	out	0x1b, r25	; 27
	counter_22--;
 150:	81 50       	subi	r24, 0x01	; 1
	PORTA=counter_22;
 152:	8b bb       	out	0x1b, r24	; 27
 154:	2f ec       	ldi	r18, 0xCF	; 207
 156:	38 e7       	ldi	r19, 0x78	; 120
 158:	92 e0       	ldi	r25, 0x02	; 2
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	30 40       	sbci	r19, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <TRAFFIC_OFF_FOR_PEOPLE+0x4a>
 162:	00 c0       	rjmp	.+0      	; 0x164 <TRAFFIC_OFF_FOR_PEOPLE+0x54>
 164:	00 00       	nop
   //initialize value of PORTS
 PORTC = 0x02;
 PORTA = 0x05;
 // begin process
{
while(counter_22!=0)
 166:	81 11       	cpse	r24, r1
 168:	f1 cf       	rjmp	.-30     	; 0x14c <TRAFFIC_OFF_FOR_PEOPLE+0x3c>
	_delay_ms(810);
	 }
}
counter_22=10;
counter_11--;
PORTC=counter_11;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	85 bb       	out	0x15, r24	; 21
	counter_22--;
	PORTA=counter_22;
	_delay_ms(810);
	 }
}
counter_22=10;
 16e:	8a e0       	ldi	r24, 0x0A	; 10
counter_11--;
PORTC=counter_11;
while(counter_22!=0)
 170:	0d c0       	rjmp	.+26     	; 0x18c <TRAFFIC_OFF_FOR_PEOPLE+0x7c>
{
PORTC=0X01;
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	95 bb       	out	0x15, r25	; 21
counter_22--;
 176:	81 50       	subi	r24, 0x01	; 1
PORTA=counter_22;
 178:	8b bb       	out	0x1b, r24	; 27
 17a:	2f ec       	ldi	r18, 0xCF	; 207
 17c:	38 e7       	ldi	r19, 0x78	; 120
 17e:	92 e0       	ldi	r25, 0x02	; 2
 180:	21 50       	subi	r18, 0x01	; 1
 182:	30 40       	sbci	r19, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <TRAFFIC_OFF_FOR_PEOPLE+0x70>
 188:	00 c0       	rjmp	.+0      	; 0x18a <TRAFFIC_OFF_FOR_PEOPLE+0x7a>
 18a:	00 00       	nop
	 }
}
counter_22=10;
counter_11--;
PORTC=counter_11;
while(counter_22!=0)
 18c:	81 11       	cpse	r24, r1
 18e:	f1 cf       	rjmp	.-30     	; 0x172 <TRAFFIC_OFF_FOR_PEOPLE+0x62>
 190:	ca e0       	ldi	r28, 0x0A	; 10
 192:	14 c0       	rjmp	.+40     	; 0x1bc <TRAFFIC_OFF_FOR_PEOPLE+0xac>
}
counter_22=10;
counter_11=0;
while(counter_22!=0)
{
	PORTC=0X00;
 194:	15 ba       	out	0x15, r1	; 21
	counter_22--;
 196:	c1 50       	subi	r28, 0x01	; 1
	PORTA=counter_22;
 198:	cb bb       	out	0x1b, r28	; 27
 19a:	2f ec       	ldi	r18, 0xCF	; 207
 19c:	38 e7       	ldi	r19, 0x78	; 120
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	30 40       	sbci	r19, 0x00	; 0
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <TRAFFIC_OFF_FOR_PEOPLE+0x90>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <TRAFFIC_OFF_FOR_PEOPLE+0x9a>
 1aa:	00 00       	nop
	_delay_ms(810);
	if(counter_22<=4)
 1ac:	c5 30       	cpi	r28, 0x05	; 5
 1ae:	30 f4       	brcc	.+12     	; 0x1bc <TRAFFIC_OFF_FOR_PEOPLE+0xac>
	{
		operatingyellowLED();
 1b0:	0e 94 74 00 	call	0xe8	; 0xe8 <operatingyellowLED>
		disableredLED();
 1b4:	0e 94 6a 00 	call	0xd4	; 0xd4 <disableredLED>
BUZZER();
 1b8:	0e 94 52 00 	call	0xa4	; 0xa4 <BUZZER>
PORTA=counter_22;
_delay_ms(810);	
}
counter_22=10;
counter_11=0;
while(counter_22!=0)
 1bc:	c1 11       	cpse	r28, r1
 1be:	ea cf       	rjmp	.-44     	; 0x194 <TRAFFIC_OFF_FOR_PEOPLE+0x84>
		operatingyellowLED();
		disableredLED();
BUZZER();
	}
}
PORTC=0X00;
 1c0:	15 ba       	out	0x15, r1	; 21
PORTA=0x00;
 1c2:	1b ba       	out	0x1b, r1	; 27
disableyellowLED();
 1c4:	0e 94 7e 00 	call	0xfc	; 0xfc <disableyellowLED>



 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <operatinggreenLED>:
	
}
void operatinggreenLED()
{
	DDRB |=(1<<5);
 1cc:	87 b3       	in	r24, 0x17	; 23
 1ce:	80 62       	ori	r24, 0x20	; 32
 1d0:	87 bb       	out	0x17, r24	; 23
	PORTB &=(~(1<<5)); //initially led is closed
 1d2:	88 b3       	in	r24, 0x18	; 24
 1d4:	8f 7d       	andi	r24, 0xDF	; 223
 1d6:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,5);
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	80 62       	ori	r24, 0x20	; 32
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	08 95       	ret

000001e0 <disablegreenLED>:
	
}
void disablegreenLED()
{
	DDRB |=(1<<5);
 1e0:	87 b3       	in	r24, 0x17	; 23
 1e2:	80 62       	ori	r24, 0x20	; 32
 1e4:	87 bb       	out	0x17, r24	; 23
	PORTB &=(~(1<5)); //initially led is closed
 1e6:	88 b3       	in	r24, 0x18	; 24
 1e8:	8e 7f       	andi	r24, 0xFE	; 254
 1ea:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(PORTB,5);
 1ec:	88 b3       	in	r24, 0x18	; 24
 1ee:	8f 7d       	andi	r24, 0xDF	; 223
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	08 95       	ret

000001f4 <TRAFFIC_ON_FOR_CARS>:
 */ 
typedef unsigned char u8; //unsigned char[8_bits] "u8"
/*TRAFFIC_ON_FOR_PEOPLE function to implement the process of counting
7 segment "99 sec"*/
int TRAFFIC_ON_FOR_CARS( ) 
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <TRAFFIC_ON_FOR_CARS+0x6>
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
  /*
  activating interrupt
  ;Implement TRAFFIC_OFF_FOR_PEOPLE function*/
   /* volatile counter_1 , counter_2 for preserving the 
   last value during interrupt*/
volatile u8 counter_1=9;  
 1fe:	89 e0       	ldi	r24, 0x09	; 9
 200:	89 83       	std	Y+1, r24	; 0x01
 volatile u8 counter_2=10; 
 202:	9a e0       	ldi	r25, 0x0A	; 10
 204:	9a 83       	std	Y+2, r25	; 0x02
// declaration 7 segments as an output module
 DDRC |=(1<<0);  
 206:	94 b3       	in	r25, 0x14	; 20
 208:	91 60       	ori	r25, 0x01	; 1
 20a:	94 bb       	out	0x14, r25	; 20
 DDRC |=(1<<1);
 20c:	94 b3       	in	r25, 0x14	; 20
 20e:	92 60       	ori	r25, 0x02	; 2
 210:	94 bb       	out	0x14, r25	; 20
 DDRC |=(1<<2);
 212:	94 b3       	in	r25, 0x14	; 20
 214:	94 60       	ori	r25, 0x04	; 4
 216:	94 bb       	out	0x14, r25	; 20
    DDRC |=(1<<3);
 218:	94 b3       	in	r25, 0x14	; 20
 21a:	98 60       	ori	r25, 0x08	; 8
 21c:	94 bb       	out	0x14, r25	; 20
   DDRA |=(1<<0);
 21e:	9a b3       	in	r25, 0x1a	; 26
 220:	91 60       	ori	r25, 0x01	; 1
 222:	9a bb       	out	0x1a, r25	; 26
   DDRA |=(1<<1);
 224:	9a b3       	in	r25, 0x1a	; 26
 226:	92 60       	ori	r25, 0x02	; 2
 228:	9a bb       	out	0x1a, r25	; 26
   DDRA |=(1<<2);
 22a:	9a b3       	in	r25, 0x1a	; 26
 22c:	94 60       	ori	r25, 0x04	; 4
 22e:	9a bb       	out	0x1a, r25	; 26
   DDRA |=(1<<3); 
 230:	9a b3       	in	r25, 0x1a	; 26
 232:	98 60       	ori	r25, 0x08	; 8
 234:	9a bb       	out	0x1a, r25	; 26
 PORTC = 0x09;
 236:	85 bb       	out	0x15, r24	; 21
  //initialize value of PORTS,Flags
 PORTA = 0x09;
 238:	8b bb       	out	0x1b, r24	; 27
// begin process
while(counter_1!=0 && counter_2!=0)
 23a:	18 c0       	rjmp	.+48     	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
	{ 
		counter_2--;
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	81 50       	subi	r24, 0x01	; 1
 240:	8a 83       	std	Y+2, r24	; 0x02
		PORTA=counter_2;
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	8b bb       	out	0x1b, r24	; 27
 246:	2f ec       	ldi	r18, 0xCF	; 207
 248:	88 e7       	ldi	r24, 0x78	; 120
 24a:	92 e0       	ldi	r25, 0x02	; 2
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
 254:	00 c0       	rjmp	.+0      	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
 256:	00 00       	nop
			_delay_ms(810); //delay time for counting
	
	if( PORTA == 0x00)
 258:	8b b3       	in	r24, 0x1b	; 27
 25a:	81 11       	cpse	r24, r1
 25c:	07 c0       	rjmp	.+14     	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
	{
		counter_2=10;
 25e:	8a e0       	ldi	r24, 0x0A	; 10
 260:	8a 83       	std	Y+2, r24	; 0x02
		counter_1--;
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	81 50       	subi	r24, 0x01	; 1
 266:	89 83       	std	Y+1, r24	; 0x01
		PORTC=counter_1;
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	85 bb       	out	0x15, r24	; 21
   DDRA |=(1<<3); 
 PORTC = 0x09;
  //initialize value of PORTS,Flags
 PORTA = 0x09;
// begin process
while(counter_1!=0 && counter_2!=0)
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	88 23       	and	r24, r24
 270:	19 f0       	breq	.+6      	; 0x278 <__EEPROM_REGION_LENGTH__+0x78>
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	81 11       	cpse	r24, r1
 276:	e2 cf       	rjmp	.-60     	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
		counter_1--;
		PORTC=counter_1;
		
		}
	}
	counter_2=10;
 278:	8a e0       	ldi	r24, 0x0A	; 10
 27a:	8a 83       	std	Y+2, r24	; 0x02
	while(counter_2!=0)
 27c:	18 c0       	rjmp	.+48     	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
	{
		PORTC = 0x00;
 27e:	15 ba       	out	0x15, r1	; 21
counter_2--;
 280:	8a 81       	ldd	r24, Y+2	; 0x02
 282:	81 50       	subi	r24, 0x01	; 1
 284:	8a 83       	std	Y+2, r24	; 0x02
PORTA=counter_2;
 286:	8a 81       	ldd	r24, Y+2	; 0x02
 288:	8b bb       	out	0x1b, r24	; 27
if(counter_2<=4)
 28a:	8a 81       	ldd	r24, Y+2	; 0x02
 28c:	85 30       	cpi	r24, 0x05	; 5
 28e:	30 f4       	brcc	.+12     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
{
	disablegreenLED();
 290:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <disablegreenLED>
	operatingyellowLED();
 294:	0e 94 74 00 	call	0xe8	; 0xe8 <operatingyellowLED>
BUZZER();
 298:	0e 94 52 00 	call	0xa4	; 0xa4 <BUZZER>
 29c:	2f ec       	ldi	r18, 0xCF	; 207
 29e:	88 e7       	ldi	r24, 0x78	; 120
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
 2ac:	00 00       	nop
		PORTC=counter_1;
		
		}
	}
	counter_2=10;
	while(counter_2!=0)
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	81 11       	cpse	r24, r1
 2b2:	e5 cf       	rjmp	.-54     	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
BUZZER();
	
}
_delay_ms(810); //delay time for counting
	}
disableyellowLED();
 2b4:	0e 94 7e 00 	call	0xfc	; 0xfc <disableyellowLED>
operatingredLED();
 2b8:	0e 94 60 00 	call	0xc0	; 0xc0 <operatingredLED>

}
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <INT0_Init>:
	interupt_function();
}
// External INT0 enable and configuration function
void INT0_Init(void)
{
		SREG  &= ~(1<<7);      // Disable interrupts by clearing I-bit
 2c6:	8f b7       	in	r24, 0x3f	; 63
 2c8:	8f 77       	andi	r24, 0x7F	; 127
 2ca:	8f bf       	out	0x3f, r24	; 63
		SREG  |= (1<<7);       // Enable interrupts by setting I-bit
 2cc:	8f b7       	in	r24, 0x3f	; 63
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	8f bf       	out	0x3f, r24	; 63
      
	DDRD  &= (~(1<<2));  // Configure INT0/PD2 as input pin
 2d2:	81 b3       	in	r24, 0x11	; 17
 2d4:	8b 7f       	andi	r24, 0xFB	; 251
 2d6:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<2);     // Enable the internal pull up resistor at PD2 pin
 2d8:	82 b3       	in	r24, 0x12	; 18
 2da:	84 60       	ori	r24, 0x04	; 4
 2dc:	82 bb       	out	0x12, r24	; 18
	GICR  |= (1<<6);    // Enable external interrupt pin INT0
 2de:	8b b7       	in	r24, 0x3b	; 59
 2e0:	80 64       	ori	r24, 0x40	; 64
 2e2:	8b bf       	out	0x3b, r24	; 59
	// Trigger INT0 with the rising edge
	MCUCR |= (1<<6);
 2e4:	85 b7       	in	r24, 0x35	; 53
 2e6:	80 64       	ori	r24, 0x40	; 64
 2e8:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<7);
 2ea:	85 b7       	in	r24, 0x35	; 53
 2ec:	80 68       	ori	r24, 0x80	; 128
 2ee:	85 bf       	out	0x35, r24	; 53
 2f0:	08 95       	ret

000002f2 <yellow_traffic>:
		g_Interrupt_Flag = 0;
	}
}
//function for alert car drivers that this a time for people passing
void yellow_traffic (void)
{
 2f2:	cf 93       	push	r28
	u8 counter=4;
 2f4:	c4 e0       	ldi	r28, 0x04	; 4
	while(counter!=0)
 2f6:	14 c0       	rjmp	.+40     	; 0x320 <yellow_traffic+0x2e>
{
	PORTC = 0x00;
 2f8:	15 ba       	out	0x15, r1	; 21
	counter--;
 2fa:	c1 50       	subi	r28, 0x01	; 1
	PORTA=counter;
 2fc:	cb bb       	out	0x1b, r28	; 27
	if(counter<=4)
 2fe:	c5 30       	cpi	r28, 0x05	; 5
 300:	30 f4       	brcc	.+12     	; 0x30e <yellow_traffic+0x1c>
	{
		disablegreenLED();
 302:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <disablegreenLED>
		operatingyellowLED();
 306:	0e 94 74 00 	call	0xe8	; 0xe8 <operatingyellowLED>
		BUZZER();
 30a:	0e 94 52 00 	call	0xa4	; 0xa4 <BUZZER>
 30e:	2f ec       	ldi	r18, 0xCF	; 207
 310:	88 e7       	ldi	r24, 0x78	; 120
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <yellow_traffic+0x22>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <yellow_traffic+0x2c>
 31e:	00 00       	nop
}
//function for alert car drivers that this a time for people passing
void yellow_traffic (void)
{
	u8 counter=4;
	while(counter!=0)
 320:	c1 11       	cpse	r28, r1
 322:	ea cf       	rjmp	.-44     	; 0x2f8 <yellow_traffic+0x6>
		BUZZER();
		
	}
_delay_ms(810); //delay time for counting
}
disableyellowLED();
 324:	0e 94 7e 00 	call	0xfc	; 0xfc <disableyellowLED>
operatingredLED();
 328:	0e 94 60 00 	call	0xc0	; 0xc0 <operatingredLED>
}
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <interupt_function>:
}

//The process of interrupt in this project  
void interupt_function(void)
{
	if(g_Interrupt_Flag ==1)
 330:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	61 f4       	brne	.+24     	; 0x350 <interupt_function+0x20>
	{
		
		disablegreenLED();
 338:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <disablegreenLED>
		yellow_traffic();
 33c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <yellow_traffic>
		operatingredLED();
 340:	0e 94 60 00 	call	0xc0	; 0xc0 <operatingredLED>
		TRAFFIC_OFF_FOR_PEOPLE();
 344:	0e 94 88 00 	call	0x110	; 0x110 <TRAFFIC_OFF_FOR_PEOPLE>
		operatinggreenLED();
 348:	0e 94 e6 00 	call	0x1cc	; 0x1cc <operatinggreenLED>
		g_Interrupt_Flag = 0;
 34c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 350:	08 95       	ret

00000352 <__vector_1>:
#include <avr/interrupt.h>  // file.h  for driving interrupt
#include "MACROS.h"  //macros library
extern unsigned char g_Interrupt_Flag = 0;
/*Interrupt service vector  must be active , when interrupt declared*/ 
ISR(INT0_vect)
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	2f 93       	push	r18
 35e:	3f 93       	push	r19
 360:	4f 93       	push	r20
 362:	5f 93       	push	r21
 364:	6f 93       	push	r22
 366:	7f 93       	push	r23
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	af 93       	push	r26
 36e:	bf 93       	push	r27
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
	g_Interrupt_Flag = 1;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	interupt_function();
 37a:	0e 94 98 01 	call	0x330	; 0x330 <interupt_function>
}
 37e:	ff 91       	pop	r31
 380:	ef 91       	pop	r30
 382:	bf 91       	pop	r27
 384:	af 91       	pop	r26
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	7f 91       	pop	r23
 38c:	6f 91       	pop	r22
 38e:	5f 91       	pop	r21
 390:	4f 91       	pop	r20
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <traffic_system_for_blinders>:
#include "interrupt.c"    //Interrupts Library to help blind people to stop cars
typedef unsigned char u8;    //unsigned char[8_bits] "u8"
 

int traffic_system_for_blinders(void)
{  INT0_Init();           // Enable and configure external INT0
 3a0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <INT0_Init>
	g_Interrupt_Flag = 0;   //initializing interrupt flag =0
 3a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	while(1)     //super loop to execute program until MCU turns off
			{
	operatinggreenLED();   //to turn on green leds for notify cars
 3a8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <operatinggreenLED>
			TRAFFIC_ON_FOR_CARS();  //to begin count 99 second for cars
 3ac:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <TRAFFIC_ON_FOR_CARS>
			/*After reaching to 0 ;turn off green leds
			  for notify cars to stop*/ 
			disablegreenLED(); 
 3b0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <disablegreenLED>
		operatingredLED(); //turn on red led to stop the cars
 3b4:	0e 94 60 00 	call	0xc0	; 0xc0 <operatingredLED>
		TRAFFIC_OFF_FOR_PEOPLE();  //to begin count 24 second for people passing 
 3b8:	0e 94 88 00 	call	0x110	; 0x110 <TRAFFIC_OFF_FOR_PEOPLE>
	  /*turn off red led to notify people to stop passing street, to permit cars to pass*/
	   disableredLED();  
 3bc:	0e 94 6a 00 	call	0xd4	; 0xd4 <disableredLED>
 3c0:	f3 cf       	rjmp	.-26     	; 0x3a8 <traffic_system_for_blinders+0x8>

000003c2 <main>:
 */ 
#include "Traffic system for blind.c" //project library
int main(void)
{ 
	/*declaration for function to execute program*/
	traffic_system_for_blinders(); 
 3c2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <traffic_system_for_blinders>

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
